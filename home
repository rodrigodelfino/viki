import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class MinhaTela extends StatefulWidget {
  @override
  _MinhaTelaState createState() => _MinhaTelaState();
}

class _MinhaTelaState extends State<MinhaTela> {
  TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> _myList = []; // lista original com todos os dados
  List<Map<String, dynamic>> _displayedList = []; // lista exibida no ListView

  @override
  void initState() {
    super.initState();
    // inicializar as duas listas com dados
    _myList = [
      {"name": "João", "photo": "https://picsum.photos/100"},
      {"name": "Maria", "photo": "https://picsum.photos/100"},
      {"name": "Pedro", "photo": "https://picsum.photos/100"},
      {"name": "Ana", "photo": "https://picsum.photos/100"},
      {"name": "Lucas", "photo": "https://picsum.photos/100"},
    ];
    _displayedList = List.from(_myList);
  }

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    throw UnimplementedError();
  }
}

class Jogador {
  final String nome;
  final String imagem;

  Jogador({required this.nome, required this.imagem});
}

Future<void> iniciajogo() async {
  await Process.run('su', [
    '-c',
    'am start com.moonactive.coinmaster/com.moon.coinmaster.android.GameActivity'
  ]);
}

Future<bool> isDirectoryEmpty(String path) async {
  final result = await Process.run('su', ['-c', 'ls $path']);
  if (result.exitCode != 0) {
    throw Exception('Failed to list directory: ${result.stderr}');
  }
  return result.stdout.trim().isEmpty;
}

Future<void> arquivo() async {
  var duration = const Duration(seconds: 2);
  sleep(duration);
  bool encontrado = false;
  while (!encontrado) {
    ProcessResult result = await Process.run('su', [
      '-c',
      'grep -q 3Aprevent_pay_bet_abuse_with_segment /data/user/0/com.moonactive.coinmaster/shared_prefs/com.moonactive.coinmaster.v2.playerprefs.xml'
    ]);
    if (result.exitCode == 0) {
      encontrado = true;
      print('A string foi encontrada no arquivo');
    } else {
      print('A string não foi encontrada no arquivo');
      await Process.run('su', [
        '-c',
        'am start com.moonactive.coinmaster/com.moon.coinmaster.android.GameActivity'
      ]);
    }
  }
  await vazio();
}

Future<void> vazio() async {
  await Process.run('su', ['-c', 'am force-stop com.moonactive.coinmaster']);
  await Process.run('su', ['-c', 'am start com.vemkikando.viki/.MainActivity']);
}

void _rodrigo() async {
  print("limpando jogo");

  ProcessResult result =
      await Process.run('su', ['-c', 'pm clear com.moonactive.coinmaster']);
  print("limpei os dados");
  //vazio();
  arquivo();
}

// Classe para armazenar as variáveis globais
class GlobalVariables {
  static String deviceID = '';
  static String deviceToken = '';
  static String accessToken = '';
  static String uservila = '';
  static String userspin = '';
  static String usernome = '';
  static String userfoto = '';
  static String usercoins = '';
  static String userinvalido = '';
  static String userlogin = '';
  static String user_login = '';
}

// Página que carrega as variáveis globais
class LoadVariablesPage extends StatefulWidget {
  @override
  _LoadVariablesPageState createState() => _LoadVariablesPageState();
}

class _LoadVariablesPageState extends State<LoadVariablesPage> {
  String _result = " ";
  bool _status = false;
  bool _statusAvailability = false;

  List<Jogador> _jogadores = [];

  TextEditingController _pesquisaController = TextEditingController();

  void vazio() async {
    var isVazio =
        await isDirectoryEmpty('/data/user/0/com.moonactive.coinmaster/');
    print(isVazio);
    if (isVazio == true) {
      Process.run('su', [
        '-c',
        'am start com.moonactive.coinmaster/com.moon.coinmaster.android.GameActivity'
      ]);
    } else {
      dados();
    }
  }

  void limparjogo() {
    Process.run('su', [
      '-c',
      'am start com.moonactive.coinmaster/com.moon.coinmaster.android.GameActivity'
    ]);
  }

  void dados() {
    // Verificar se o diretório de preferências do aplicativo está vazio

    // Se o diretório não estiver vazio, executar os comandos para obter o DeviceID e o DeviceToken
    Process.run('su', [
      '-c',
      'cat /data/user/0/com.moonactive.coinmaster/shared_prefs/com.moonactive.coinmaster.v2.playerprefs.xml | grep DeviceID'
    ]).then((result) {
      String deviceID =
          result.stdout.toString().split('DeviceID">')[1].split('</string>')[0];
      GlobalVariables.deviceID = deviceID;

      print('Device: ' + deviceID);
      Process.run('su', [
        '-c',
        'cat /data/user/0/com.moonactive.coinmaster/shared_prefs/com.moonactive.coinmaster.v2.playerprefs.xml | grep DeviceToken'
      ]).then((result) {
        String deviceToken = result.stdout
            .toString()
            .split('DeviceToken">')[1]
            .split('</string>')[0];
        GlobalVariables.deviceToken = deviceToken;
        Navigator.pushReplacementNamed(context, '/user_token');
      });
    });

    Process.run(
            'su', ['-c', 'cat /data/data/com.vemkikando.viki/files/preference'])
        .then((result) {
      String user_99 = result.stdout.toString();

      GlobalVariables.user_login = user_99;
      print("nome: ${GlobalVariables.user_login}");
    });
  }

  @override
  void initState() {
    super.initState();

    vazio();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: CircularProgressIndicator(),
      ),
    );
  }
}

// Página que usa as variáveis globais
class UserTokenPage extends StatefulWidget {
  @override
  _UserTokenPageState createState() => _UserTokenPageState();
}

class _UserTokenPageState extends State<UserTokenPage> {
  String _validationCode = '';
  bool _isLoading = false;

  void _separateAccessToken(String value) {
    List<String> parts = value.split('access_token%22%3A%22');
    if (parts.length > 1) {
      GlobalVariables.accessToken =
          parts[1].split('%22%2C%22data_access_expiration_time')[0];
    }
  }

  Future<void> conexoes() async {
    var headers = {
      'Host': 'vik-game.moonactive.net',
      'User-Agent':
          'UnityPlayer/2019.4.22f1 (UnityWebRequest/1.0, libcurl/7.52.0-DEV)',
      'Accept-Encoding': 'gzip, deflate',
      'Accept': 'application/json',
      'X-CLIENT-VERSION': '3.5.1080',
      'X-PLATFORM': 'Android',
      'Authorization': 'Bearer ' + '${GlobalVariables.deviceToken}',
      'Content-Type': 'application/x-www-form-urlencoded',
      'X-Unity-Version': '2019.4.22f1',
      //'Content-Length': '206',
    };

    var data = 'Device%5budid%5d=' +
        '${GlobalVariables.deviceID}' +
        '&API_KEY=viki&API_SECRET=coin&Device%5Bchange%5D=&fbToken=&locale=pt&Device%5Bos%5D=Android&Client%5Bversion%5D=3.5_fband&Device%5Bversion%5D=5.1.1&seq=0';

    var url = Uri.parse('https://vik-game.moonactive.net/api/v1/users/login');
    var res = await http.post(url, headers: headers, body: data);
    if (res.statusCode != 200)
      throw Exception('http.post error: statusCode= ${res.statusCode}');
    //print(res.body);
    var jsondata = jsonDecode(res.body);
    var userid = jsondata["userId"];
    var sessiontoken = jsondata["sessionToken"];

//2

    var headers2 = {
      'Host': 'vik-game.moonactive.net',
      'User-Agent':
          'UnityPlayer/2019.4.22f1 (UnityWebRequest/1.0, libcurl/7.52.0-DEV)',
      'Accept-Encoding': 'gzip, deflate',
      'Accept': 'application/json',
      'X-CLIENT-VERSION': '3.5.1080',
      'X-PLATFORM': 'Android',
      'Authorization': 'Bearer ' + '$sessiontoken',
      'Content-Type': 'application/x-www-form-urlencoded',
      'X-Unity-Version': '2019.4.22f1',
      //'Content-Length': '376',
    };
    var data2 = 'Device%5budid%5d=' +
        '${GlobalVariables.deviceID}' +
        '&API_KEY=viki&API_SECRET=coin&Device%5bchange%5d=20230323_8&fbToken=&locale=en&User%5bfb_token%5d=' +
        '${GlobalVariables.accessToken}' +
        '&p=fb&Client%5bversion%5d=3.5.1080_fband';

    var url2 = Uri.parse('https://vik-game.moonactive.net/api/v1/users/' +
        userid +
        '/update_fb_data');
    var res2 = await http.post(url2, headers: headers2, body: data2);
    //print(res2.statusCode);
    if (res2.statusCode == 200) {
      GlobalVariables.userinvalido = '1';
      var jsondata2 = jsonDecode(res2.body);
      var fbtokennew = jsondata2["fbToken"];
      //print(fbtokennew);
      print(res2.body);

      //3

      var headers3 = {
        'Host': 'vik-game.moonactive.net',
        'User-Agent':
            'UnityPlayer/2019.4.22f1 (UnityWebRequest/1.0, libcurl/7.52.0-DEV)',
        'Accept-Encoding': 'gzip, deflate',
        'Accept': 'application/json',
        'X-CLIENT-VERSION': '3.5.1080',
        'X-PLATFORM': 'Android',
        'Authorization': 'Bearer ' + '${GlobalVariables.deviceToken}',
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Unity-Version': '2019.4.22f1',
      };

      var data3 = 'Device%5budid%5d=' +
          '${GlobalVariables.deviceID}' +
          '&API_KEY=viki&API_SECRET=coin&Device%5Bchange%5D=&fbToken=&locale=pt&Device%5Bos%5D=Android&Client%5Bversion%5D=3.5_fband&Device%5Bversion%5D=5.1.1&seq=0';

      var url3 =
          Uri.parse('https://vik-game.moonactive.net/api/v1/users/login');
      var res3 = await http.post(url3, headers: headers3, body: data3);
      var jsondata3 = jsonDecode(res3.body);
      var userid3 = jsondata3["userId"];
      var sessiontoken3 = jsondata3["sessionToken"];

      //print(res3.body);

//5

      var headers5 = {
        'Host': 'vik-game.moonactive.net',
        'User-Agent':
            'UnityPlayer/2019.4.22f1 (UnityWebRequest/1.0, libcurl/7.52.0-DEV)',
        'Accept-Encoding': 'gzip, deflate',
        'Accept': 'application/json',
        'X-CLIENT-VERSION': '3.5.1080',
        'X-PLATFORM': 'Android',
        'Authorization': 'Bearer ' + '$sessiontoken3',
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Unity-Version': '2019.4.22f1',
        //'Content-Length': '376',
      };
      var data5 = 'Device%5budid%5d=' +
          '${GlobalVariables.deviceID}' +
          '&API_KEY=viki&API_SECRET=coin&Device%5bchange%5d=20230323_8&fbToken=&locale=en&User%5bfb_token%5d=' +
          '${GlobalVariables.accessToken}' +
          '&p=fb&Client%5bversion%5d=3.5.1080_fband';

      var url5 = Uri.parse('https://vik-game.moonactive.net/api/v1/users/' +
          userid3 +
          '/update_fb_data');
      var res5 = await http.post(url5, headers: headers5, body: data5);

      var jsondata5 = jsonDecode(res5.body);
      var userid5 = jsondata5["userId"];
      var fbtokennew5 = jsondata5["fbToken"];
      var usernome = jsondata5["fbData"]["name"];
      var userfoto = jsondata5["fbData"]["id"];
      GlobalVariables.usernome = usernome;
      GlobalVariables.userfoto = userfoto;

      print(res5.body);

      print("nome danone: ${GlobalVariables.user_login}");

//4

      var headers4 = {
        'Host': 'vik-game.moonactive.net',
        'User-Agent':
            'UnityPlayer/2019.4.22f1 (UnityWebRequest/1.0, libcurl/7.52.0-DEV)',
        'Accept-Encoding': 'gzip, deflate',
        'Accept': 'application/json',
        'X-CLIENT-VERSION': '3.5.1080',
        'X-PLATFORM': 'Android',
        'Authorization': 'Bearer ' + sessiontoken3,
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Unity-Version': '2019.4.22f1',
        'Accept-Encoding': 'gzip',
      };

      var data4 = 'Device%5budid%5d=' +
          '${GlobalVariables.deviceID}' +
          '&API_KEY=viki&API_SECRET=coin&Device%5bchange%5d=20230323_8&fbToken=' +
          fbtokennew5 +
          '&locale=en&Device%5bos%5d=Android&Client%5bversion%5d=3.5.1080&extended=true&segmented=true';

      var url4 = Uri.parse('https://vik-game.moonactive.net/api/v2/users/' +
          userid5 +
          '/fullData');
      var res4 = await http.post(url4, headers: headers4, body: data4);

      //print(res4.body);
      //print(userid3);
      //List cupons = [];

      var jsondata4 = jsonDecode(res4.body);
      var usercoins = jsondata4["coins"];
      var userspins = jsondata4["spins"];
      var uservila = jsondata4["village"];
      var vila = uservila + 1;
      var spinsmostra = userspins;
      var coinsmostra = usercoins;
      String vila2 = vila.toString();
      String spins2 = spinsmostra.toString();
      String coins2 = coinsmostra.toString();

      var cuponshoje = jsondata4["coupons"];
      GlobalVariables.uservila = vila2;
      GlobalVariables.userspin = spins2;
      GlobalVariables.usercoins = coins2;
/*
    for (var cupom in cuponshoje) {
      cupons.add(cupom);
    }

    print(cupons); // Imprime a lista de cupons obtidos
  */

      int quantidadeCupons = cuponshoje.length;
      print("Foram encontrados $quantidadeCupons cupons.");

      final List<dynamic> cupom = jsondata4["coupons"];

// Filtra a lista de cupons para incluir apenas aqueles com estado "pending"
      final List<dynamic> cuponsPendentes =
          cupom.where((cupom) => cupom["state"] == "pending").toList();

// Ordena a lista de cupons pendentes em ordem decrescente de porcentagem
      cuponsPendentes.sort(
          (a, b) => b["payload"]["percentage"] - a["payload"]["percentage"]);

// Itera sobre a lista de cupons pendentes e exibe o título e a porcentagem
      for (var cupom in cuponsPendentes) {
        final title = cupom["title"];
        final percent = cupom["payload"]["percentage"];
        print("$title: ${percent}");
      }
    } else {
      print("ta errado");
      GlobalVariables.userinvalido = '0';
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            contentPadding: EdgeInsets.fromLTRB(24.0, 20.0, 24.0, 0),
            content: SizedBox(
              height: 150,
              width: 102,
              child: Column(
                children: [
                  Image.asset(
                      "assets/images/error.png"), // ou Image.network(url)
                  SizedBox(height: 16),
                  Text("Token Inválido",
                      style: TextStyle(
                        fontSize: 20,
                      )),
                ],
              ),
            ),
            actions: [
              TextButton(
                child: Text("OK"),
                onPressed: () {
                  Navigator.of(context).pop();
                  GlobalVariables.accessToken = "0";
                  Navigator.pushReplacementNamed(context, '/home');
                },
              ),
            ],
          );
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    List<Map<String, dynamic>> _myList = [
      {'name': 'João', 'photo': 'https://picsum.photos/200'},
      {'name': 'Maria', 'photo': 'https://picsum.photos/200'},
      {'name': 'Pedro', 'photo': 'https://picsum.photos/200'},
      {'name': 'Pedro', 'photo': 'https://picsum.photos/200'},
      {'name': 'Pedro', 'photo': 'https://picsum.photos/200'},
      {'name': 'Pedro', 'photo': 'https://picsum.photos/200'},
      {'name': 'Pedro', 'photo': 'https://picsum.photos/200'},
      {'name': 'Pedro', 'photo': 'https://picsum.photos/200'},
      {'name': 'Pedro', 'photo': 'https://picsum.photos/200'},
    ];
    return Scaffold(
      appBar: AppBar(
        title: Text('Valida Token'),
      ),
      body: Padding(
        padding: EdgeInsets.only(top: MediaQuery.of(context).size.height * 0),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SizedBox(
                width: 340,
                child: TextField(
                  decoration: InputDecoration(
                    border: OutlineInputBorder(),
                    labelText: 'Inserir URL Cliente',
                  ),
                  onChanged: (value) {
                    setState(() {
                      _validationCode = value;
                    });
                  },
                ),
              ),
              SizedBox(height: 15),
              ElevatedButton(
                onPressed: () async {
                  setState(() {
                    _isLoading = true;
                  });
                  _separateAccessToken(_validationCode);

                  await conexoes();
                  if (GlobalVariables.userinvalido == '1') {
                    setState(() {
                      _isLoading = true;
                    });
                    // show modal

                    showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return Dialog(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(5),
                          ),
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Stack(
                                children: [
                                  Align(
                                    alignment: Alignment.topRight,
                                    child: IconButton(
                                      onPressed: () {
                                        Navigator.of(context).pop();
                                        GlobalVariables.accessToken = "0";
                                        Navigator.pushReplacementNamed(
                                            context, '/home');
                                      },
                                      icon: Icon(Icons.close),
                                    ),
                                  ),
                                  Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Image.network(
                                        'https://social-images.moonactive.net/api/v2/fbimages/${GlobalVariables.userfoto}',
                                        width: 125,
                                        height: 140,
                                      ),
                                      SizedBox(height: 20),
                                      Text(
                                        '${GlobalVariables.userlogin}\n${GlobalVariables.usernome}\n\nVila: ${GlobalVariables.uservila}\nGiros: ${GlobalVariables.userspin}\nMoedas: ${GlobalVariables.usercoins}\n',
                                        style: TextStyle(
                                          fontSize: 14,
                                          color:
                                              Color.fromARGB(255, 15, 23, 51),
                                          fontFamily: '',
                                        ),
                                      ),
                                      Container(
                                        alignment: Alignment.bottomCenter,
                                        child: ButtonBar(
                                          buttonMinWidth: 100,
                                          children: [
                                            ElevatedButton(
                                              onPressed: () {
                                                Navigator.of(context).pop();
                                                GlobalVariables.accessToken =
                                                    "0";
                                                Navigator.pushReplacementNamed(
                                                    context, '/home');
                                              },
                                              style: ElevatedButton.styleFrom(
                                                primary: Colors.red,
                                              ),
                                              child: Text('Fechar',
                                                  style:
                                                      TextStyle(fontSize: 12)),
                                            ),
                                            ElevatedButton(
                                              onPressed: () {
                                                // Ação a ser executada ao confirmar euomesmo
                                                iniciajogo();
                                                Navigator.of(context).pop();
                                                GlobalVariables.accessToken =
                                                    "0";
                                                Navigator.pushReplacementNamed(
                                                    context, '/home');
                                              },
                                              child: Text('Confirmar',
                                                  style:
                                                      TextStyle(fontSize: 12)),
                                            ),
                                            ElevatedButton(
                                              onPressed: () async {
                                                // Ação a ser executada ao clicar em "Salvar"
                                                var url =
                                                    'https://2023.farol.vip/viki/salva_contato.php';
                                                var response = await http.post(
                                                  Uri.parse(url),
                                                  body: {
                                                    'userfoto': GlobalVariables
                                                        .userfoto,
                                                    'userlogin': GlobalVariables
                                                        .user_login,
                                                    'usernome': GlobalVariables
                                                        .usernome,
                                                    'accessToken':
                                                        GlobalVariables
                                                            .accessToken,
                                                  },
                                                );
                                                // Exibir a resposta da requisição (opcional)
                                                print(
                                                    'Resposta do servidor: ${response.body}');
                                              },
                                              child: Text('Salvar',
                                                  style:
                                                      TextStyle(fontSize: 12)),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ],
                          ),
                        );
                      },
                    );
                  }
                },
                child: _isLoading ? Text('Validando') : Text('Validar'),
              ),
              TextField(
                
                decoration: InputDecoration(
                  hintText: 'Pesquisar',
                ),
              ),
              Container(
                height: 260, // altura fixa do container
                child: Scrollbar(
                  isAlwaysShown: true,
                  child: ListView.builder(
                    shrinkWrap: true,
                    itemCount: _myList.length,
                    itemExtent: 55, // altura fixa de cada item do ListView
                    itemBuilder: (BuildContext context, int index) {
                      return ListTile(
                        leading: CircleAvatar(
                          backgroundImage:
                              NetworkImage(_myList[index]['photo']),
                        ),
                        title: Text(_myList[index]['name']),
                      );
                    },
                  ),
                ),
              ),
              SizedBox(height: 30),
              ElevatedButton(
                onPressed: () {
                  _rodrigo();
                },
                style: ElevatedButton.styleFrom(
                  primary: Color.fromARGB(255, 204, 99, 0),
                  onPrimary: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0),
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.warning),
                    SizedBox(width: 8.0),
                    Text('LIMPAR JOGO'),
                  ],
                ),
              ),
              SizedBox(height: 00),
            ],
          ),
        ),
      ),
    );
  }
}

// Widget principal
class MyApp extends StatelessWidget {
  final String usuariologin;

  const MyApp({required this.usuariologin});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My App',
      initialRoute: '/',
      routes: {
        '/': (context) => LoadVariablesPage(),
        '/user_token': (context) => UserTokenPage(),
      },
    );
  }
}
